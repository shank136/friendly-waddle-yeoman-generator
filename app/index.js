'use strict';
var generators = require('yeoman-generator');
var _ = require('lodash');
var chalk = require('chalk');
var yosay = require('yosay');

module.exports = generators.Base.extend({
  constructor: function() {
    generators.Base.apply(this, arguments);

    this.argument('appname', {
      type: String,
      required: true
    });
    this.appname = _.kebabCase(this.appname);
  },

  initializing: function() {},
  //prompting the user
  prompting: function() {
    this.log(yosay('Welcome to ' +
      chalk.yellow('YAN (Yet Another Node)') + ' generator!'));

    var done = this.async();
    this.prompt([{
        type: 'input',
        name: 'nodeappname',
        message: 'Node App Name (node-app)',
        //default: 'app'
        default: this.config.get('nodeappname') || 'app'
        //store: true
      },
      {
        type: 'checkbox',
        name: 'nodelibs',
        message: 'Which Node JS libraries would you like to include?',
        choices: [{
            name: 'lodash',
            value: 'lodash',
            checked: true
          },
          {
            name: 'Moment.js',
            value: 'momentjs',
            checked: true
          },
          {
            name: 'express',
            value: 'express',
            checked: true
          },
          {
            name: 'redis',
            value: 'redis',
            checked: true
          },
          {
            name: 'request',
            value: 'request',
            checked: true
          },
          {
            name: 'response-time',
            value: 'response-time',
            checked: true
          },
          {
            name: 'soap',
            value: 'soap',
            checked: true
          }
        ]
      }
    ], function(answers) {
      this.log(answers);
      this.config.set('nodeappname', answers.nodeappname);
      this.config.save();

      this.includeLodash = _.includes(answers.nodelibs, 'lodash');
      this.includeMoment = _.includes(answers.nodelibs, 'momentjs');
      this.includeExpress = _.includes(answers.nodelibs, 'express');
      this.includeRedis = _.includes(answers.nodelibs, 'redis');
      this.includeRequest = _.includes(answers.nodelibs, 'request');
      this.includeResponseTime = _.includes(answers.nodelibs, 'response-time');
      this.includeSoap = _.includes(answers.nodelibs, 'soap');
      done();
    }.bind(this));

  },
  configuring: function() {},
  writing: {

    //creating gulp files
    gulpfile: function() {},

    //creating package.json file
    packageJSON: function() {
      var packageJson = {
        name: this.appname,
        version: '1.0.0',
        description: 'My cool Node.js application generated by Yeoman',
        main: 'server.js',
        scripts: {
          test: 'echo \"Error: no test specified\" && exit 1',
          start: 'node server.js'
        },
        author: 'EBSS-Dev',
        license: 'KP',
        dependencies: {}
      };

      //optional dependencies
      if (this.includeExpress) {
        packageJson.dependencies['express'] = '^4.15.3';
      }
      if (this.includeRedis) {
        packageJson.dependencies['redis'] = '^2.7.1';
      }
      if (this.includeRequest) {
        packageJson.dependencies['request'] = '^2.81.0';
      }
      if (this.includeResponseTime) {
        packageJson.dependencies['response-time'] = '^2.3.2';
      }
      if (this.includeSoap) {
        packageJson.dependencies['soap'] = '^0.19.2';
      }
      if (this.includeLodash) {
        packageJson.dependencies['lodash'] = '~3.10.1';
      }
      if (this.includeMoment) {
        packageJson.dependencies['moment'] = '~2.10.6';
      }

      //required dependencies
      packageJson.dependencies['yeoman-generator'] = '0.21.1'; //check version
      packageJson.dependencies['generator-common'] = '0.2.0';
      packageJson.dependencies['yosay'] = '^2.0.1';
      packageJson.dependencies['chalk'] = '^2.1.0';

      //writing package.json
      this.fs.writeJSON('package.json', packageJson);
    },

    //copy git files
    git: function() {
      //this.copy('gitignore', '.gitignore');
      this.composeWith('common', {
        options: {
          'skip-messages': true,
          gitignore: true,
          gitattributes: true,
          jshintrc: false,
          editorconfig: false,
          'test-jshintrc': false
        }
      }, {
        local: require.resolve('generator-common')
      });
    },

    //staying away from bower
    bower: function() {},

    //static files go here
    appStaticFiles: function() {
      this.copy('_favicon.ico', 'src/favicon.ico');
      this.directory('styles', 'src/styles');
    },

    //copy required files and directories
    scripts: function() {
      this.fs.copyTpl(
        this.templatePath('server/_server.js'),
        this.destinationPath('src/server/server.js'), {
          ngapp: this.config.get('nodeappname')
        });
      this.fs.copyTpl(
        this.templatePath('model/_model.js'),
        this.destinationPath('src/model/model.js'), {
          ngapp: this.config.get('nodeappname')
        });
      this.fs.copyTpl(
        this.templatePath('playground/_playground.js'),
        this.destinationPath('src/playground/playground.js'), {
          ngapp: this.config.get('nodeappname')
        });
    },

    //copy required html files
    html: function() {
      this.fs.copyTpl(
        this.templatePath('_index.html'),
        this.destinationPath('src/index.html'), {
          appname: _.startCase(this.appname),
          ngapp: this.config.get('nodeappname')
        }
      );
    }
  },

  conflicts: function() {},

  //install the required dependencies
  install: function() {
    this.npmInstall();
  },

  end: function() {
    this.log(chalk.yellow.bold('Installation successful!'));

    var howToInstall =
      '\nAfter running ' + chalk.yellow.bold('npm install') +
      ', inject your front end dependencies by running ' +
      chalk.yellow.bold('gulp wiredep') + '.';

    if (this.options['skip-install']) {
      this.log(howToInstall);
      return;
    }
  }
});
